Architecture Overview
=====================

**DeepPavlov Agent** helps production chatbot developers to organize multiple NLP models in a single pipeline.
Modern chatbots usually solve different tasks (like chitchat, goal-oriented, question answering) simultaneously,
so the platform should have the following characteristics:

    * be stable at highload environment
    * save and pass the chatbot state_ across all the connected models

.. image:: ../_static/Agent_Pipeline_v2.png
   :height: 600
   :align: center
   :alt: Architecture

**Key concepts in DeepPavlov Agent architecture:**

* ``Utterance`` is a single message produced by a human or a bot;

* ``Service`` is any NLP model that can be inferred as a REST service.

  There are different types of services:

    * ``Annotator`` is a service for utterance preprocessing. It can be some basic text preprocessing like
      coreference resolution, named entity recognition, spell correction, etc.;

    * ``Skill`` is a service producing a bot reply to a user utterance;

    * ``Skill Selector`` is a service choosing which bunch of available skills should be responsible
      for producing possible bot replies;

    * ``Response Selector`` is a service choosing a single bot reply from the available replies;

    * ``Postprocessor`` is a service postprocessing a bot utterance. It can make some basic things
      like adding a user name to the reply, inserting emojis, etc.;

* ``Postprocessed Response`` is a final postprocessed bot utterance that is shown to the user.

* ``State`` is current dialogs between users and a bot serialized as **json**. State is used to pass information
  across the services and contains all possibly needed information about the current dialogs.
  It has separate `documentation <state_>`__.


Installation
============

Deeppavlov agent requires python >= 3.7 and can be installed from pip.

     .. code:: bash

         pip install deeppavlov_agent


Running the Agent
=================

Agent can run both from container and from a local machine. The default Agent port is **4242**.
The launch command is:

     .. code:: bash

         python -m deeppavlov_agent.run -ch http_client -p 4242 -pl pipeline_conf.json -db db_conf.json -rl -d 

Command parameters are:

    * -ch - output channel for agent. Could be either ``http_client`` or ``cmd_client``
    * -p - port for http_client. Defaults to 4242
    * -pl - pipeline config path
    * -d - database config path
    * -rl - include response logger
    * -d - launch in debug mode (additional data in http output)


**HTTP api server**
-------------------

1. **Web server accepts POST requests with application/json content-type**

    Request should be in form:

    .. code:: javascript

        {
          "user_id": "unique id of user",
          "payload": "phrase, which should be processed by agent"
        }

    Example of running request with curl:

    .. code:: bash

        curl --header "Content-Type: application/json" \
             --request POST \
             --data '{"user_id":"xyz","payload":"hello"}' \
             http://localhost:4242

    Agent will return a json response:

    .. code:: javascript

        {
          "user_id": "same user id as in request",
          "response": "phrase, which were generated by skills in order to respond"
        }

    In case of wrong format, HTTP errors will be returned.

2.  **Arbitrary input format of the Agent Server**

     If you want to pass anything except
     ``user_id`` and ``payload``, just pass it as an additional key-value item, for example:

     .. code:: bash

        curl --header "Content-Type: application/json" \
             --request POST \
             --data '{"user_id":"xyz","payload":"hello", "my_custom_dialog_id": 111}' \
             http://localhost:4242

     All additional items will be stored into the ``attributes`` field of a ``HumanUtterance``.

3. **View dialogs in the database through GET requests**

    The result is returned in json format which can be easily prettifyed with various browser extensions.

    Two main web pages are provided (examples are shown for the case when agent is running on http://localhost:4242):

     * http://localhost:4242/api/dialogs/<dialog_id> - provides exact dialog (dialog_id can be seen on /dialogs page)
     * http://localhost:4242/api/user/<user_id> - provides all dialogs by user_id

4. **Additional load analytics**

    You can view actual data on quantity of tasks in processing and average response time for both agent and separate services.
    Data is provided in real time on page http://localhost:4242/debug/current_load


Analyzing the data
==================

All conversations with the Agent are stored to a Mongo DB. When they are dumped, they have
the same format as the Agent's. Someone may need to dump and analyze the whole dialogs,
or users, or annotations. For now, the following Mongo collections are available and can be
dumped separately:

    * Human
    * Bot
    * User (Human & Bot)
    * HumanUtterance
    * BotUtterance
    * Utterance (HumanUtterance & BotUtterance)
    * Dialog


.. _state: https://deeppavlov-agent.readthedocs.io/en/latest/_static/api.html